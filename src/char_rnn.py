from torch import Tensor
from torch.nn import RNN, Linear, LogSoftmax, Module


class CharRNN(Module):
    """A recurrent neural network (RNN) module for character-level processing.

    This class is designed for modeling sequential data at the character level.
    It takes an input tensor, processes it through an RNN layer, and generates
    an output through a linear layer followed by a softmax activation. This is
    useful for tasks such as sequence generation, classification, or other
    applications involving sequential data.
    """

    def __init__(self, input_size: int, hidden_size: int, output_size: int) -> None:
        """Create a new CharRNN instance with the specified parameters.

        :param input_size: The size of the input features for the RNN layer.
        :param hidden_size: The size of the hidden state in the RNN layer.
        :param output_size: The size of the output layer which corresponds to the number of classes.

        """
        super().__init__()

        self.rnn = RNN(input_size, hidden_size)
        self.h2o = Linear(hidden_size, output_size)
        self.softmax = LogSoftmax(dim=1)

    def forward(self, line_tensor: Tensor) -> Tensor:
        """Process an input tensor through the RNN layer followed by a fully connected layer and a softmax activation.

        :param line_tensor: Input tensor representing the sequence to process
        :return: Output tensor with probabilities generated by softmax
        """
        rnn_out, hidden = self.rnn(line_tensor)
        output = self.h2o(hidden[0])
        return self.softmax(output)
